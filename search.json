[{"title":"es6那些事(2)箭头函数","url":"/2019/09/23/es6那些事-2-箭头函数/","content":"## 我叫箭头函数\n---\n### 箭头函数的特点\n\n#### (1)语法简洁\njs的函数的一般写法\n```\nconst numbers = [5,6,13,0,1,18,23];\n        const double = numbers.map(function(number){\n            return number*2;\n        });\n```\n 输出\n\n![](/img/一般函数.png)\n\n 箭头函数写法\n```\nconst numbers = [5,6,13,0,1,18,23];\n        const double = numbers.map((number) =>{\n            return number*2;\n        });\n```\n输出\n\n![](/img/箭头函数写法.png)\n\n一个参数可省掉括号\n```\nconst numbers = [5,6,13,0,1,18,23];\nconst double = numbers.map(number => {\n        return number*2;\n      });\n```\n输出\n\n![](/img/一个参数.png)\n\n没有参数不能省\n```\nconst numbers = [5,6,13,0,1,18,23];\nconst double = numbers.map(() => {\n               return 'hello';\n       }); \n```\n输出\n\n![](/img/没有参数.png)\n\n多参数写法\n```\nconst numbers = [5,6,13,0,1,18,23];\nconst double = numbers.map((number,i) =>{\n    return`${i}:${number*2}`\n      });\n```\n\n输出\n\n![](/img/多参数.png)\n\n##### 语法总结\n删掉function关键字，加上一个箭头(=>),多个参数用逗号分隔，且必须加括号，一个参数可不加，没有参数不能省。\n\n---\n\n#### (2)可以隐式返回\n先来看下显式返回\n```\nconst numbers = [5,6,13,0,1,18,23];\n        const double = numbers.map(function(number){\n            return number*2;\n        }); \n```\n输出\n\n![](/img/显式返回.png)\n显式返回必须要有大括号和return。\n\n隐式返回\n``` \nconst numbers = [5,6,13,0,1,18,23];\n        const double = numbers.map((number) => number*2); \n```\n输出\n\n![](/img/隐式返回.png)\n箭头函数的隐式返回则可以省掉大括号和return，语法更简洁。\n\n---\n\n#### (3)都是匿名函数\n命名函数写法\n```\nfunction greet(name){\n    console.log(`I am ${name}`);\n} \ngreet('bai');\n```\n输出\n\n![](/img/命名函数.png)\n\n箭头函数写法\n```\nconst greet = name =>{console.log(`I am ${name}`)}\ngreet('bai');\n```\n输出\n\n![](/img/匿名函数.png)\n\n---\n\n#### (4)箭头函数没有自己的this指向\n一般js函数\n```\nconst jelly={\n            name:'jelly',\n            hobbies:['codeing','slepping','reading'],\n            printHobbies:function(){\n                this.hobbies.map(function(hobby){\n                    console.log(`${this.name} love ${hobby}`);\n                })\n            }\n        }\n        jelly.printHobbies();\n```\n输出\n\n![](/img/普通this.png)\n由输出结果可知，name没有输出，可能是this指向问题，于是我们打印this\n```\n const jelly={\n            name:'jelly',\n            hobbies:['codeing','slepping','reading'],\n            printHobbies:function(){\n                this.hobbies.map(function(hobby){\n                               console.log(this);\n                    console.log(`${this.name} love ${hobby}`);\n                })\n            }\n        }\n        jelly.printHobbies();\n```\n输出\n\n![](/img/打印this.png)\n在js中，this指向是运行时才开始，而独立函数其指向默认指向window。\n为了解决此问题，我们通常申明一个变量赋值给this\n``` \nconst jelly={\n            name:'jelly',\n            hobbies:['codeing','slepping','reading'],\n            printHobbies:function(){\n                let self = this;\n                this.hobbies.map(function(hobby){\n                    console.log(`${self.name} love ${hobby}`);\n                })\n            }\n        }\n        jelly.printHobbies();\n```\n输出\n\n![](/img/赋值this.png)\n\n箭头函数写法\n ``` \n const jelly={\n            name:'jelly',\n            hobbies:['codeing','slepping','reading'],\n            printHobbies:function(){\n                this.hobbies.map(hobby =>{\n                    //console.log(this);\n                    console.log(`${this.name} love ${hobby}`);\n                })\n            }\n        }\n        jelly.printHobbies();\n ```\n 输出\n\n ![](/img/箭头函数this.png)\n 完美输出，原因是因为箭头函数没有自己this指向，其this指向继承其父函数，如果其父函数也是箭头函数的话，那就再往上继承。\n\n ---\n\n ### 使用箭头函数时应注意\n （1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。\n\n---\n###### 参考文档[es6官方文档/函数的扩展](http://caibaojian.com/es6/function.html)\n###### 参考视频[bilibili.com/av47304735](https://search.bilibili.com/all?keyword=av47304735)\n","tags":["es6"]},{"title":"es6那些事(1)命令符","url":"/2019/09/22/es6那些事-1-命令符/","content":"# 关于var,let和const \n---\n## 变量var\n\n### 1.基本用法\n\n```\n var a=0;\n```\n\n---\n\n### 2.会进行覆盖\n```\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6]();\n```\n### 输出结果\n![输出结果](/img/变量覆盖.png)\n\n---\n\n### 3.存在变量提升\n```\nconsole.log(a);\na=5;\n```\n\n### 输出结果\n![](/img/变量提升.png)\n### 相当于\n```\nvar a;\nconsole.log(a);\na=5;\n```\n\n---\n\n### 4.可重复申明\n```\nvar a=3;\nvar a=5;\nconsole.log(a);\n```\n\n### 输出\n![](/img/重复申明.png)\n\n---\n\n## 块局变量let\n\n### 1.作用于局部\n```\n{let a=5;}\nconsole.log(a);\n```\n\n### 输出\n![](/img/局部变量.png)\n\n---\n\n### 2.不存在变量提升\n```\nconsole.log(a);\nlet a=2;\n```\n\n### var存在变量提升，所以输出undefined，let不存在变量提升，所以报错ReferenceError。\n![](/img/局部报错.png)\n\n---\n\n### 3.暂时性死区\n### 如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n```\nvar a=123;\nif(true){\n     a='asd';\n     let a;\n   }\n```\n\n### 输出\n![](/img/封闭性区间.png)\n\n---\n\n## 另一个块局变量const\n\n### 1.申明只读常量\n### const申明的变量值不可再更改。\n```\nconst a=6;\na=5;\nconsole.log(a);\n```\n\n### 输出\n![](/img/只读常量.png)\n\n---\n\n### 2.const定义对象值不可更改，但属性可更改\n### 比如下面这种情况，const在定义时，其指针指向“person”,而不是里面的“name”和“age”，所以“age”和“name”可以改变。可以理解为人的外貌不变，但内心的想法可以改变。\n\n```\nconst person={\n            name:'小明',\n            age:20\n        }\nperson.age=30;\nconsole.log(person.age);\n```\n\n### 输出\n![](/img/const对象.png)\n\n---\n\n### 3.变量必须立刻初始化\n```\nconst a;\n```\n\n### 输出\n![](/img/const申明.png)\n\n---\n\n## 总结\n   ### 默认使用const,\n   ### 当变量需要更新时用let,\n   ### 尽量不适用var。\n\n---\n\n###### 参考文档[es6官方文档/let和const命令](http://caibaojian.com/es6/let.html)\n###### 参考视频[bilibili.com/av47304735](https://search.bilibili.com/all?keyword=av47304735)","tags":["es6"]},{"title":"Hello World","url":"/2019/08/31/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post1\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]